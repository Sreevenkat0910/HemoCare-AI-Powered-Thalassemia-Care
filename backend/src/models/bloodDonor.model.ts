import mongoose, { Document, Schema } from 'mongoose';

export interface IBloodDonor extends Document {
  // Authentication fields (entered by donor)
  email: string;
  password: string;
  
  // Basic donor information (entered by donor)
  user_id: string;
  bridge_id: string;
  role: string;
  blood_group: string;
  gender: string;
  latitude: number;
  longitude: number;
  donor_type: string;
  
  // Bridge information (generated by app/AI)
  bridge_gender: string;
  bridge_blood_group: string;
  bridge_status: string;
  
  // Medical information (entered by donor/healthcare provider)
  quantity_required: number;
  last_transfusion_date: Date;
  expected_next_transfusion_date: Date;
  last_donation_date: Date;
  next_eligible_date: Date;
  donations_till_date: number;
  eligibility_status: string;
  
  // App-generated fields
  registration_date: Date;
  role_status: string;
  status: string;
  user_donation_active_status: string;
  
  // AI-generated fields
  cycle_of_donations: number;
  frequency_in_days: number;
  status_of_bridge: string;
  donated_earlier: boolean;
  last_bridge_donation_date: Date;
  calls_to_donations_ratio: number;
  total_calls: number;
  last_contacted_date: Date;
  inactive_trigger_comment: string;
  
  // Timestamps
  createdAt: Date;
  updatedAt: Date;
}

const bloodDonorSchema = new Schema<IBloodDonor>({
  // Authentication fields
  email: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    lowercase: true,
    match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  
  // Basic donor information
  user_id: {
    type: String,
    required: true,
    unique: true,
    trim: true
  },
  bridge_id: {
    type: String,
    required: true,
    trim: true
  },
  role: {
    type: String,
    required: true,
    enum: ['donor', 'recipient', 'both'],
    default: 'donor'
  },
  blood_group: {
    type: String,
    required: true,
    enum: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'],
    uppercase: true
  },
  gender: {
    type: String,
    required: true,
    enum: ['male', 'female', 'other'],
    lowercase: true
  },
  latitude: {
    type: Number,
    required: true,
    min: -90,
    max: 90
  },
  longitude: {
    type: Number,
    required: true,
    min: -180,
    max: 180
  },
  donor_type: {
    type: String,
    required: true,
    enum: ['emergency-donor', 'bridge-donor', 'volunteer'],
    lowercase: true
  },
  
  // Bridge information
  bridge_gender: {
    type: String,
    enum: ['male', 'female', 'other', 'any'],
    lowercase: true,
    default: 'any'
  },
  bridge_blood_group: {
    type: String,
    enum: ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'any'],
    uppercase: true,
    default: 'any'
  },
  bridge_status: {
    type: String,
    enum: ['active', 'inactive', 'pending', 'matched'],
    lowercase: true,
    default: 'pending'
  },
  
  // Medical information
  quantity_required: {
    type: Number,
    required: true,
    min: 0,
    default: 0
  },
  last_transfusion_date: {
    type: Date,
    default: null
  },
  expected_next_transfusion_date: {
    type: Date,
    default: null
  },
  last_donation_date: {
    type: Date,
    default: null
  },
  next_eligible_date: {
    type: Date,
    default: null
  },
  donations_till_date: {
    type: Number,
    min: 0,
    default: 0
  },
  eligibility_status: {
    type: String,
    enum: ['eligible', 'not_eligible', 'pending_verification', 'temporarily_deferred'],
    lowercase: true,
    default: 'pending_verification'
  },
  
  // App-generated fields
  registration_date: {
    type: Date,
    default: Date.now
  },
  role_status: {
    type: String,
    enum: ['active', 'inactive', 'suspended', 'pending'],
    lowercase: true,
    default: 'pending'
  },
  status: {
    type: String,
    enum: ['active', 'inactive', 'suspended', 'deceased', 'transferred'],
    lowercase: true,
    default: 'active'
  },
  user_donation_active_status: {
    type: String,
    enum: ['active', 'inactive', 'temporarily_inactive'],
    lowercase: true,
    default: 'active'
  },
  
  // AI-generated fields
  cycle_of_donations: {
    type: Number,
    min: 0,
    default: 0
  },
  frequency_in_days: {
    type: Number,
    min: 0,
    default: 0
  },
  status_of_bridge: {
    type: String,
    enum: ['optimal', 'suboptimal', 'critical', 'excellent', 'good', 'fair', 'poor'],
    lowercase: true,
    default: 'good'
  },
  donated_earlier: {
    type: Boolean,
    default: false
  },
  last_bridge_donation_date: {
    type: Date,
    default: null
  },
  calls_to_donations_ratio: {
    type: Number,
    min: 0,
    default: 0
  },
  total_calls: {
    type: Number,
    min: 0,
    default: 0
  },
  last_contacted_date: {
    type: Date,
    default: null
  },
  inactive_trigger_comment: {
    type: String,
    trim: true,
    default: ''
  }
}, {
  timestamps: true, // Adds createdAt and updatedAt fields
  collection: 'blood_donors'
});

// Indexes for better query performance
bloodDonorSchema.index({ bridge_id: 1 });
bloodDonorSchema.index({ blood_group: 1 });
bloodDonorSchema.index({ location: '2dsphere' }); // For geospatial queries
bloodDonorSchema.index({ eligibility_status: 1 });
bloodDonorSchema.index({ next_eligible_date: 1 });
bloodDonorSchema.index({ status: 1 });

// Virtual for location (combines latitude and longitude)
bloodDonorSchema.virtual('location').get(function() {
  return {
    type: 'Point',
    coordinates: [this.longitude, this.latitude]
  };
});

// Pre-save middleware to hash password (you'll need to implement this)
bloodDonorSchema.pre('save', async function(next) {
  // Only hash the password if it has been modified (or is new)
  if (!this.isModified('password')) return next();
  
  try {
    // TODO: Implement password hashing here
    // const hashedPassword = await bcrypt.hash(this.password, 10);
    // this.password = hashedPassword;
    next();
  } catch (error) {
    next(error as Error);
  }
});

// Method to check password (you'll need to implement this)
bloodDonorSchema.methods.comparePassword = async function(candidatePassword: string): Promise<boolean> {
  try {
    // TODO: Implement password comparison here
    // return await bcrypt.compare(candidatePassword, this.password);
    return candidatePassword === this.password; // Temporary for development
  } catch (error) {
    return false;
  }
};

export const BloodDonor = mongoose.model<IBloodDonor>('BloodDonor', bloodDonorSchema);
